"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ReactTelephoneInput = void 0;

var _cramda = _interopRequireDefault(require("cramda"));

var _reactTinyVirtualList = _interopRequireDefault(require("react-tiny-virtual-list"));

var _debounce = _interopRequireDefault(require("debounce"));

var _lodash = _interopRequireDefault(require("lodash.memoize"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _countryTelephoneData = _interopRequireDefault(require("country-telephone-data"));

var _format_number = _interopRequireDefault(require("./format_number"));

var _replace_country_code = _interopRequireDefault(require("./replace_country_code"));

var _number_validator = _interopRequireDefault(require("./number_validator"));

var _guessSelectedCountry = _interopRequireDefault(require("./guessSelectedCountry"));

var _jsxFileName = "/Users/mukesh/Documents/projects/react-telephone-input/src/ReactTelephoneInput.js";

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var find = _cramda["default"].find,
    propEq = _cramda["default"].propEq,
    equals = _cramda["default"].equals,
    findIndex = _cramda["default"].findIndex,
    startsWith = _cramda["default"].startsWith;
var allCountries = _countryTelephoneData["default"].allCountries,
    iso2Lookup = _countryTelephoneData["default"].iso2Lookup;
var isModernBrowser = true;

if (typeof document !== 'undefined') {
  isModernBrowser = Boolean(document.createElement('input').setSelectionRange);
} else {
  isModernBrowser = true;
}

var keys = {
  UP: 38,
  DOWN: 40,
  RIGHT: 39,
  LEFT: 37,
  ENTER: 13,
  ESC: 27,
  PLUS: 43,
  A: 65,
  Z: 90,
  SPACE: 32
};

function getDropdownListWidth() {
  var defaultWidth = 400;
  var horizontalMargin = 20;

  if (window.innerWidth - horizontalMargin < defaultWidth) {
    return window.innerWidth - horizontalMargin;
  } else {
    return defaultWidth;
  }
}

var ReactTelephoneInput = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ReactTelephoneInput, _Component);

  function ReactTelephoneInput(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "numberInputRef", null);

    _defineProperty(_assertThisInitialized(_this), "_cursorToEnd", function (skipFocus) {
      var input = _this.numberInputRef;

      if (skipFocus) {
        _this._fillDialCode();
      } else {
        input.focus();

        if (isModernBrowser) {
          var len = input.value.length;
          input.setSelectionRange(len, len);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFlagDropdownClick", function (e) {
      if (_this.props.disabled) {
        return;
      }

      e.preventDefault();
      var _this$state = _this.state,
          preferredCountries = _this$state.preferredCountries,
          selectedCountry = _this$state.selectedCountry;
      var onlyCountries = _this.props.onlyCountries;
      var highlightCountry = find(equals(_this.state.selectedCountry), preferredCountries.concat(onlyCountries));
      var highlightCountryIndex = findIndex(propEq('iso2', selectedCountry.iso2), preferredCountries.concat(onlyCountries)); // need to put the highlight on the current selected country if the dropdown is going to open up

      _this.setState({
        showDropDown: !_this.state.showDropDown,
        highlightCountry: highlightCountry,
        highlightCountryIndex: highlightCountryIndex
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleInput", function (event) {
      var formattedNumber = '+';
      var newSelectedCountry = _this.state.selectedCountry;
      var freezeSelection = _this.state.freezeSelection; // if the input is the same as before, must be some special key like enter, alt, command etc.

      if (event.target.value === _this.state.formattedNumber) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault();
      } else {
        // ie hack
        event.returnValue = false; // eslint-disable-line no-param-reassign
      }

      if (event.target.value && event.target.value.length > 0) {
        // before entering the number in new format,
        // lets check if the dial code now matches some other country
        // replace all non-numeric characters from the input string
        var inputNumber = event.target.value.replace(/\D/g, ''); // we don't need to send the whole number to guess the country...
        // only the first 6 characters are enough
        // the guess country function can then use memoization much more effectively
        // since the set of input it gets has drastically reduced

        if (!_this.state.freezeSelection || _this.state.selectedCountry.dialCode.length > inputNumber.length) {
          newSelectedCountry = (0, _guessSelectedCountry["default"])(inputNumber.substring(0, 6), _this.props);
          freezeSelection = false;
        }

        formattedNumber = (0, _format_number["default"])(inputNumber, newSelectedCountry.format, _this.props.autoFormat);
      }

      var caretPosition = event.target.selectionStart;
      var oldFormattedText = _this.state.formattedNumber;
      var diff = formattedNumber.length - oldFormattedText.length;
      var selectedCountry = newSelectedCountry.dialCode.length > 0 ? newSelectedCountry : _this.state.selectedCountry;

      _this.setState({
        formattedNumber: formattedNumber,
        freezeSelection: freezeSelection,
        selectedCountry: selectedCountry
      }, function () {
        if (isModernBrowser) {
          if (caretPosition === 1 && formattedNumber.length === 2) {
            caretPosition += 1;
          }

          if (diff > 0) {
            caretPosition -= diff;
          }

          if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {
            if (_this.numberInputRef) {
              _this.numberInputRef.setSelectionRange(caretPosition, caretPosition);
            }
          }
        }

        if (_this.props.onChange) {
          _this.props.onChange(formattedNumber, selectedCountry);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputClick", function () {
      _this.setState({
        showDropDown: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleFlagItemClick", function (country) {
      var onlyCountries = _this.props.onlyCountries;
      var currentSelectedCountry = _this.state.selectedCountry;
      var nextSelectedCountry = find(function (c) {
        return c.iso2 === country.iso2;
      }, onlyCountries); // tiny optimization

      if (nextSelectedCountry && currentSelectedCountry.iso2 !== nextSelectedCountry.iso2) {
        var newNumber = (0, _replace_country_code["default"])(currentSelectedCountry, nextSelectedCountry, _this.state.formattedNumber.replace(/\D/g, '') // let's convert formatted number to just numbers for easy find/replace
        );
        var formattedNumber = (0, _format_number["default"])(newNumber, nextSelectedCountry.format, _this.props.autoFormat);

        _this.setState({
          showDropDown: false,
          selectedCountry: nextSelectedCountry,
          freezeSelection: true,
          formattedNumber: formattedNumber
        }, function () {
          _this._cursorToEnd();

          if (_this.props.onChange) {
            _this.props.onChange(formattedNumber, nextSelectedCountry);
          }
        });
      } else {
        _this.setState({
          showDropDown: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputFocus", function () {
      // trigger parent component's onFocus handler
      if (typeof _this.props.onFocus === 'function') {
        _this.props.onFocus(_this.state.formattedNumber, _this.state.selectedCountry);
      }

      _this._fillDialCode();
    });

    _defineProperty(_assertThisInitialized(_this), "_fillDialCode", function () {
      // if the input is blank, insert dial code of the selected country
      if (_this.numberInputRef && _this.numberInputRef.value === '+') {
        _this.setState({
          formattedNumber: "+" + _this.state.selectedCountry.dialCode
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "_getHighlightCountryIndex", function (direction) {
      var onlyCountries = _this.props.onlyCountries;
      var _this$state2 = _this.state,
          highlightCountryIndex = _this$state2.highlightCountryIndex,
          preferredCountries = _this$state2.preferredCountries; // had to write own function because underscore does not have findIndex. lodash has it

      var newHighlightCountryIndex = highlightCountryIndex + direction;

      if (newHighlightCountryIndex < 0 || newHighlightCountryIndex >= onlyCountries.length + preferredCountries.length) {
        return newHighlightCountryIndex - direction;
      }

      return newHighlightCountryIndex;
    });

    _defineProperty(_assertThisInitialized(_this), "_searchCountry", (0, _lodash["default"])(function searchCountry(queryString) {
      if (!queryString || queryString.length === 0) {
        return null;
      } // don't include the preferred countries in search


      var probableCountries = this.props.onlyCountries.filter(function (country) {
        return startsWith(queryString.toLowerCase(), country.name.toLowerCase());
      }, this);
      return probableCountries[0];
    }));

    _defineProperty(_assertThisInitialized(_this), "searchCountry", function () {
      var probableCandidate = _this._searchCountry(_this.state.queryString) || _this.props.onlyCountries[0];

      var probableCandidateIndex = findIndex(propEq('iso2', probableCandidate.iso2), _this.props.onlyCountries) + _this.state.preferredCountries.length;

      _this.setState({
        queryString: '',
        highlightCountryIndex: probableCandidateIndex
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeydown", function (event) {
      if (!_this.state.showDropDown || event.metaKey || event.altKey) {
        return;
      } // ie hack


      if (event.preventDefault) {
        event.preventDefault();
      } else {
        event.returnValue = false; // eslint-disable-line no-param-reassign
      }

      var self = _assertThisInitialized(_this);

      function _moveHighlight(direction) {
        var highlightCountryIndex = self._getHighlightCountryIndex(direction);

        self.setState({
          highlightCountryIndex: highlightCountryIndex
        });
      }

      switch (event.which) {
        case keys.DOWN:
          _moveHighlight(1);

          break;

        case keys.UP:
          _moveHighlight(-1);

          break;

        case keys.ENTER:
          _this.handleFlagItemClick(_this.state.preferredCountries.concat(_this.props.onlyCountries)[_this.state.highlightCountryIndex], event);

          break;

        case keys.ESC:
          _this.setState({
            showDropDown: false
          }, _this._cursorToEnd);

          break;

        default:
          if (event.which >= keys.A && event.which <= keys.Z || event.which === keys.SPACE) {
            _this.setState({
              queryString: _this.state.queryString + String.fromCharCode(event.which)
            }, _this.state.debouncedQueryStingSearcher);
          }

      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputKeyDown", function (event) {
      if (event.which === keys.ENTER && typeof _this.props.onEnterKeyPress === 'function') {
        _this.props.onEnterKeyPress(event);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickOutside", function () {
      if (_this.state.showDropDown) {
        _this.setState({
          showDropDown: false
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getCountryDropDownList", function () {
      var _this$state3 = _this.state,
          highlightCountryIndex = _this$state3.highlightCountryIndex,
          preferredCountries = _this$state3.preferredCountries;
      var data = preferredCountries.concat(_this.props.onlyCountries);
      return /*#__PURE__*/_react["default"].createElement(_reactTinyVirtualList["default"], {
        width: getDropdownListWidth(),
        height: 300,
        itemCount: data.length,
        itemSize: 40,
        style: _this.props.listStyle,
        className: "country-list",
        scrollToIndex: highlightCountryIndex,
        scrollToAlignment: "center",
        renderItem: function renderItem(_ref) {
          var index = _ref.index,
              style = _ref.style;
          var country = data[index];
          var itemClasses = (0, _classnames["default"])(_this.props.listItemClassName, {
            preferred: findIndex(propEq('iso2', country.iso2), _this.state.preferredCountries) >= 0,
            highlight: _this.state.highlightCountryIndex === index
          });
          var inputFlagClasses = "flag " + country.iso2;
          return /*#__PURE__*/_react["default"].createElement("div", {
            key: "flag_no_" + index,
            "data-flag-key": "flag_no_" + index,
            className: itemClasses,
            "data-dial-code": country.dialCode,
            "data-country-code": country.iso2,
            onClick: _this.handleFlagItemClick.bind(_assertThisInitialized(_this), country),
            style: style,
            title: country.name + " - " + country.dialCode,
            "data-test-id": "src_reacttelephoneinput_test_id_0",
            __self: _assertThisInitialized(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 511,
              columnNumber: 13
            }
          }, /*#__PURE__*/_react["default"].createElement("div", {
            className: inputFlagClasses,
            style: _this.getFlagStyle(),
            "data-test-id": "src_reacttelephoneinput_test_id_1",
            __self: _assertThisInitialized(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 522,
              columnNumber: 15
            }
          }), /*#__PURE__*/_react["default"].createElement("span", {
            className: "country-name",
            "data-test-id": "src_reacttelephoneinput_test_id_2",
            __self: _assertThisInitialized(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 527,
              columnNumber: 15
            }
          }, country.name), /*#__PURE__*/_react["default"].createElement("span", {
            className: "dial-code",
            "data-test-id": "src_reacttelephoneinput_test_id_3",
            __self: _assertThisInitialized(_this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 533,
              columnNumber: 15
            }
          }, "+" + country.dialCode));
        },
        __self: _assertThisInitialized(_this),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 488,
          columnNumber: 7
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getFlagStyle", function () {
      if (_this.props.flagsImagePath) {
        return {
          backgroundImage: "url(" + _this.props.flagsImagePath + ")"
        };
      }

      return {};
    });

    _defineProperty(_assertThisInitialized(_this), "handleInputBlur", function () {
      if (typeof _this.props.onBlur === 'function') {
        _this.props.onBlur(_this.state.formattedNumber, _this.state.selectedCountry);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleFlagKeyDown", function (event) {
      // only trigger dropdown click if the dropdown is not already open.
      // it will otherwise interfere with key up/down of list
      if (event.which === keys.DOWN && _this.state.showDropDown === false) {
        _this.handleFlagDropdownClick(event);
      }
    });

    var _preferredCountries = props.preferredCountries.map(function (iso2) {
      return Object.prototype.hasOwnProperty.call(iso2Lookup, iso2) ? allCountries[iso2Lookup[iso2]] : null;
    }).filter(function (val) {
      return val !== null;
    });

    _this.state = {
      firstCall: true,
      preferredCountries: _preferredCountries,
      showDropDown: false,
      queryString: '',
      freezeSelection: false,
      debouncedQueryStingSearcher: (0, _debounce["default"])(_this.searchCountry, 600)
    };
    return _this;
  }

  var _proto = ReactTelephoneInput.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._cursorToEnd(true);
  };

  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !equals(nextProps, this.props) || !equals(nextState, this.state);
  };

  ReactTelephoneInput.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    var inputNumber;
    var onlyCountries = props.onlyCountries;
    var showDropDown = state.showDropDown,
        preferredCountries = state.preferredCountries,
        selectedCountry = state.selectedCountry; // don't calculate new state if the dropdown is open. We might be changing
    // the highlightCountryIndex using our keys

    if (showDropDown) {
      return state;
    }

    if (props.value) {
      inputNumber = props.value;
    } else if (props.initialValue && state.firstCall) {
      inputNumber = props.initialValue;
    } else if (props.value === null) {
      // just clear the value
      inputNumber = '';
    } else if (state && state.formattedNumber && state.formattedNumber.length > 0) {
      inputNumber = state.formattedNumber;
    } else {
      inputNumber = '';
    }

    var selectedCountryGuess = (0, _guessSelectedCountry["default"])(inputNumber.replace(/\D/g, ''), props); // if the guessed country has the same dialCode as the selected country in
    // our state, we give preference to the already selected country

    if (selectedCountry && selectedCountryGuess.dialCode === selectedCountry.dialCode) {
      selectedCountryGuess = selectedCountry;
    }

    var selectedCountryGuessIndex = findIndex(propEq('iso2', selectedCountryGuess.iso2), preferredCountries.concat(onlyCountries));
    var formattedNumber = (0, _format_number["default"])(inputNumber.replace(/\D/g, ''), selectedCountryGuess ? selectedCountryGuess.format : null, props.autoFormat);
    return {
      firstCall: false,
      selectedCountry: selectedCountryGuess,
      highlightCountryIndex: selectedCountryGuessIndex,
      formattedNumber: formattedNumber
    };
  } // put the cursor to the end of the input (usually after a focus event)
  ;

  _proto.render = function render() {
    var _this2 = this;

    var selectedCountry = this.state.selectedCountry;
    var arrowClasses = (0, _classnames["default"])({
      arrow: true,
      up: this.state.showDropDown
    });
    var inputClasses = (0, _classnames["default"])({
      'form-control': true,
      'invalid-number': !this.props.isValid(this.state.formattedNumber.replace(/\D/g, ''))
    });
    var flagViewClasses = (0, _classnames["default"])({
      'flag-dropdown': true,
      'open-dropdown': this.state.showDropDown
    });
    var inputFlagClasses = "flag " + selectedCountry.iso2;
    var buttonProps = this.props.buttonProps;
    var otherProps = this.props.inputProps;

    if (this.props.inputId) {
      otherProps.id = this.props.inputId;
    }

    return /*#__PURE__*/_react["default"].createElement("div", {
      className: (0, _classnames["default"])('react-tel-input', this.props.classNames, this.props.className),
      "data-test-id": "src_reacttelephoneinput_test_id_4",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 594,
        columnNumber: 7
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: flagViewClasses,
      onKeyDown: this.handleKeydown,
      "data-test-id": "src_reacttelephoneinput_test_id_6",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 602,
        columnNumber: 9
      }
    }, /*#__PURE__*/_react["default"].createElement("button", _extends({
      onClick: this.handleFlagDropdownClick,
      className: "selected-flag",
      title: selectedCountry.name + ": + " + selectedCountry.dialCode,
      "data-test-id": "src_reacttelephoneinput_test_id_7",
      onKeyDown: this.handleFlagKeyDown,
      type: "button"
    }, buttonProps, {
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 607,
        columnNumber: 11
      }
    }), /*#__PURE__*/_react["default"].createElement("div", {
      className: inputFlagClasses,
      style: this.getFlagStyle(),
      "data-test-id": "src_reacttelephoneinput_test_id_8",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 616,
        columnNumber: 13
      }
    }, /*#__PURE__*/_react["default"].createElement("div", {
      className: arrowClasses,
      "data-test-id": "src_reacttelephoneinput_test_id_9",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 621,
        columnNumber: 15
      }
    }))), this.state.showDropDown ? this.getCountryDropDownList() : ''), /*#__PURE__*/_react["default"].createElement("input", _extends({
      onChange: this.handleInput,
      onClick: this.handleInputClick,
      onFocus: this.handleInputFocus,
      onBlur: this.handleInputBlur,
      onKeyDown: this.handleInputKeyDown,
      value: this.state.formattedNumber,
      ref: function ref(node) {
        _this2.numberInputRef = node;
      },
      type: "tel",
      className: inputClasses,
      autoComplete: this.props.autoComplete,
      pattern: this.props.pattern,
      required: this.props.required,
      placeholder: this.props.placeholder,
      disabled: this.props.disabled
    }, otherProps, {
      "data-test-id": "src_reacttelephoneinput_test_id_5",
      __self: this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 629,
        columnNumber: 9
      }
    })));
  };

  return ReactTelephoneInput;
}(_react.Component);

exports.ReactTelephoneInput = ReactTelephoneInput;

_defineProperty(ReactTelephoneInput, "defaultProps", {
  autoFormat: true,
  onlyCountries: allCountries,
  defaultCountry: allCountries[0].iso2,
  isValid: _number_validator["default"],
  flagsImagePath: 'flags.png',
  onEnterKeyPress: function onEnterKeyPress() {},
  preferredCountries: [],
  disabled: false,
  placeholder: '+1 (702) 123-4567',
  autoComplete: 'tel',
  required: false,
  inputProps: {},
  buttonProps: {},
  listItemClassName: 'country',
  listStyle: {
    zIndex: 20,
    backgroundColor: 'white'
  }
});

ReactTelephoneInput.propTypes = process.env.NODE_ENV !== "production" ? {
  value: _propTypes["default"].string,
  initialValue: _propTypes["default"].string,
  autoFormat: _propTypes["default"].bool,
  defaultCountry: _propTypes["default"].string,
  isValid: _propTypes["default"].func,
  onlyCountries: _propTypes["default"].arrayOf(_propTypes["default"].object),
  preferredCountries: _propTypes["default"].arrayOf(_propTypes["default"].string),
  flagsImagePath: _propTypes["default"].string,
  placeholder: _propTypes["default"].string,
  autoComplete: _propTypes["default"].string,
  classNames: _propTypes["default"].string,
  className: _propTypes["default"].string,
  inputId: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  onEnterKeyPress: _propTypes["default"].func,
  onBlur: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  disabled: _propTypes["default"].bool,
  pattern: _propTypes["default"].string,
  required: _propTypes["default"].bool,
  inputProps: _propTypes["default"].object,
  buttonProps: _propTypes["default"].object,
  listStyle: _propTypes["default"].object,
  listItemClassName: _propTypes["default"].string
} : {};

var _default = (0, _reactClickOutside["default"])(ReactTelephoneInput);

exports["default"] = _default;