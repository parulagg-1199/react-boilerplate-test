{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = guessSelectedCountry;\n\nvar _cramda = _interopRequireDefault(require(\"cramda\"));\n\nvar _countryTelephoneData = _interopRequireDefault(require(\"country-telephone-data\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // memoize results based on the first 5/6 characters. That is all that matters\n\n\nvar find = _cramda[\"default\"].find,\n    propEq = _cramda[\"default\"].propEq,\n    startsWith = _cramda[\"default\"].startsWith;\nvar allCountries = _countryTelephoneData[\"default\"].allCountries,\n    allCountryCodes = _countryTelephoneData[\"default\"].allCountryCodes;\n\nfunction guessSelectedCountry(inputNumber, props) {\n  var defaultCountry = props.defaultCountry,\n      onlyCountries = props.onlyCountries;\n  var secondBestGuess = find(propEq('iso2', defaultCountry), allCountries) || onlyCountries[0];\n  var inputNumberForCountries = inputNumber.substr(0, 4);\n  var bestGuess;\n\n  if (inputNumber.trim() !== '') {\n    bestGuess = onlyCountries.reduce(function (selectedCountry, country) {\n      // if the country dialCode exists WITH area code\n      if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === country.iso2) {\n        return country; // if the selected country dialCode is there with the area code\n      } else if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === selectedCountry.iso2) {\n        return selectedCountry; // else do the original if statement\n      }\n\n      if (startsWith(country.dialCode, inputNumber)) {\n        if (country.dialCode.length > selectedCountry.dialCode.length) {\n          return country;\n        }\n\n        if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n          return country;\n        }\n      }\n\n      return selectedCountry;\n    }, {\n      dialCode: '',\n      priority: 10001\n    }, this);\n  } else {\n    return secondBestGuess;\n  }\n\n  if (!bestGuess || !bestGuess.name) {\n    return secondBestGuess;\n  }\n\n  return bestGuess;\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/react-telephone-input/lib/guessSelectedCountry.js"],"names":["exports","__esModule","guessSelectedCountry","_cramda","_interopRequireDefault","require","_countryTelephoneData","obj","find","propEq","startsWith","allCountries","allCountryCodes","inputNumber","props","defaultCountry","onlyCountries","secondBestGuess","inputNumberForCountries","substr","bestGuess","trim","reduce","selectedCountry","country","iso2","dialCode","length","priority","name","module","default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,oBAArB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,IAAIC,qBAAqB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAAlD;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACN,UAAX,GAAwBM,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D,C,CAEjG;;;AACA,IAAIC,IAAI,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,IAA9B;AAAA,IACIC,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAP,CAAmBM,MADhC;AAAA,IAEIC,UAAU,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBO,UAFpC;AAGA,IAAIC,YAAY,GAAGL,qBAAqB,CAAC,SAAD,CAArB,CAAiCK,YAApD;AAAA,IACIC,eAAe,GAAGN,qBAAqB,CAAC,SAAD,CAArB,CAAiCM,eADvD;;AAGA,SAASV,oBAAT,CAA8BW,WAA9B,EAA2CC,KAA3C,EAAkD;AAChD,MAAIC,cAAc,GAAGD,KAAK,CAACC,cAA3B;AAAA,MACIC,aAAa,GAAGF,KAAK,CAACE,aAD1B;AAEA,MAAIC,eAAe,GAAGT,IAAI,CAACC,MAAM,CAAC,MAAD,EAASM,cAAT,CAAP,EAAiCJ,YAAjC,CAAJ,IAAsDK,aAAa,CAAC,CAAD,CAAzF;AACA,MAAIE,uBAAuB,GAAGL,WAAW,CAACM,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB,CAA9B;AACA,MAAIC,SAAJ;;AAEA,MAAIP,WAAW,CAACQ,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BD,IAAAA,SAAS,GAAGJ,aAAa,CAACM,MAAd,CAAqB,UAAUC,eAAV,EAA2BC,OAA3B,EAAoC;AACnE;AACA,UAAIZ,eAAe,CAACM,uBAAD,CAAf,IAA4CN,eAAe,CAACM,uBAAD,CAAf,CAAyC,CAAzC,MAAgDM,OAAO,CAACC,IAAxG,EAA8G;AAC5G,eAAOD,OAAP,CAD4G,CAC5F;AACjB,OAFD,MAEO,IAAIZ,eAAe,CAACM,uBAAD,CAAf,IAA4CN,eAAe,CAACM,uBAAD,CAAf,CAAyC,CAAzC,MAAgDK,eAAe,CAACE,IAAhH,EAAsH;AAC3H,eAAOF,eAAP,CAD2H,CACnG;AACzB;;AAED,UAAIb,UAAU,CAACc,OAAO,CAACE,QAAT,EAAmBb,WAAnB,CAAd,EAA+C;AAC7C,YAAIW,OAAO,CAACE,QAAR,CAAiBC,MAAjB,GAA0BJ,eAAe,CAACG,QAAhB,CAAyBC,MAAvD,EAA+D;AAC7D,iBAAOH,OAAP;AACD;;AAED,YAAIA,OAAO,CAACE,QAAR,CAAiBC,MAAjB,KAA4BJ,eAAe,CAACG,QAAhB,CAAyBC,MAArD,IAA+DH,OAAO,CAACI,QAAR,GAAmBL,eAAe,CAACK,QAAtG,EAAgH;AAC9G,iBAAOJ,OAAP;AACD;AACF;;AAED,aAAOD,eAAP;AACD,KAnBW,EAmBT;AACDG,MAAAA,QAAQ,EAAE,EADT;AAEDE,MAAAA,QAAQ,EAAE;AAFT,KAnBS,EAsBT,IAtBS,CAAZ;AAuBD,GAxBD,MAwBO;AACL,WAAOX,eAAP;AACD;;AAED,MAAI,CAACG,SAAD,IAAc,CAACA,SAAS,CAACS,IAA7B,EAAmC;AACjC,WAAOZ,eAAP;AACD;;AAED,SAAOG,SAAP;AACD;;AAEDU,MAAM,CAAC9B,OAAP,GAAiBA,OAAO,CAAC+B,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = guessSelectedCountry;\n\nvar _cramda = _interopRequireDefault(require(\"cramda\"));\n\nvar _countryTelephoneData = _interopRequireDefault(require(\"country-telephone-data\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// memoize results based on the first 5/6 characters. That is all that matters\nvar find = _cramda[\"default\"].find,\n    propEq = _cramda[\"default\"].propEq,\n    startsWith = _cramda[\"default\"].startsWith;\nvar allCountries = _countryTelephoneData[\"default\"].allCountries,\n    allCountryCodes = _countryTelephoneData[\"default\"].allCountryCodes;\n\nfunction guessSelectedCountry(inputNumber, props) {\n  var defaultCountry = props.defaultCountry,\n      onlyCountries = props.onlyCountries;\n  var secondBestGuess = find(propEq('iso2', defaultCountry), allCountries) || onlyCountries[0];\n  var inputNumberForCountries = inputNumber.substr(0, 4);\n  var bestGuess;\n\n  if (inputNumber.trim() !== '') {\n    bestGuess = onlyCountries.reduce(function (selectedCountry, country) {\n      // if the country dialCode exists WITH area code\n      if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === country.iso2) {\n        return country; // if the selected country dialCode is there with the area code\n      } else if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === selectedCountry.iso2) {\n        return selectedCountry; // else do the original if statement\n      }\n\n      if (startsWith(country.dialCode, inputNumber)) {\n        if (country.dialCode.length > selectedCountry.dialCode.length) {\n          return country;\n        }\n\n        if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {\n          return country;\n        }\n      }\n\n      return selectedCountry;\n    }, {\n      dialCode: '',\n      priority: 10001\n    }, this);\n  } else {\n    return secondBestGuess;\n  }\n\n  if (!bestGuess || !bestGuess.name) {\n    return secondBestGuess;\n  }\n\n  return bestGuess;\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}