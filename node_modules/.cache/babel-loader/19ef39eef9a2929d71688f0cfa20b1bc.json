{"ast":null,"code":"\"use strict\";\n/**\nCopyright (c) 2018-present, Eaton\n \nAll rights reserved.\n \nThis code is licensed under the BSD-3 license found in the LICENSE file in the root directory of this source tree and at https://opensource.org/licenses/BSD-3-Clause.\n**/\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) {\n    if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleTooltipFormatter = exports.sharedTimeTooltipFormatter = exports.sharedTooltipFormatter = exports.getRandomData = void 0;\n/*\n  This file contains various utility functions used to help build highcharts components.\n\n  getRandomData: generates random data for a placeholder chart\n  sharedTooltipFormatter: function used to render a shared html tooltip\n  sharedTimeTooltipFormatter: function used to render a shared html tooltip with Timestamp x value\n  simpleTooltipFormatter: function used to render a simple html tooltip for single series charts\n*/\n\nvar styles_1 = require(\"../styles\"); // timestamp used as a starting point for randomized time-series data\n\n\nvar startTime = new Date().getTime();\nvar contextErrorMessage = 'Error: No context.points.';\n/*\n  returns a set of randomized numeric data based on the paramters\n\n  scale: (Number) the range of numeric values\n  balanced: (Boolean) if true, data will range from -scale/2 to +scale/2. If false, data will range from 0 to scale.\n  count: (Number) the number of data points to generate\n  timeseries: (Boolean) if true, the x-values will be timestamps\n*/\n\nfunction getRandomData(scale, balanced, count, timeseries) {\n  if (balanced === void 0) {\n    balanced = true;\n  }\n\n  if (count === void 0) {\n    count = 20;\n  }\n\n  if (timeseries === void 0) {\n    timeseries = false;\n  } // generate an array of random data\n\n\n  var data = [];\n  var i;\n\n  for (i = 0; i < count; i++) {\n    if (timeseries) {\n      data.push({\n        x: startTime + i * 1000,\n        y: (Math.random() - (balanced ? 0.5 : 0)) * scale\n      });\n    } else {\n      data.push((Math.random() - (balanced ? 0.5 : 0)) * scale);\n    }\n  }\n\n  return data;\n}\n\nexports.getRandomData = getRandomData;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\n\nfunction sharedTooltipFormatter(context, units, rounding) {\n  if (units === void 0) {\n    units = [];\n  }\n\n  if (rounding === void 0) {\n    rounding = [];\n  }\n\n  var s = \"<div style=\\\"min-width: 100px; padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\"><table>\";\n\n  if (context.points) {\n    for (var i = 0; i < context.points.length; i++) {\n      s += \"\" + '<tr>' + '<td style=\"padding:0\"><b>' + context.points[i].y.toFixed(rounding.length > 0 ? rounding[i] : 3) + \"<span style=\\\"color: \" + context.points[i].color + \"\\\">\" + (units.length > 0 ? \" \" + units[i] : '') + \"</span></b></td></tr>\";\n    }\n  } else {\n    s += contextErrorMessage;\n  }\n\n  s += \"</table><span>\" + context.x + \"</span></div>\";\n  return s;\n}\n\nexports.sharedTooltipFormatter = sharedTooltipFormatter;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\n\nfunction sharedTimeTooltipFormatter(context, units, rounding) {\n  if (units === void 0) {\n    units = [];\n  }\n\n  if (rounding === void 0) {\n    rounding = [];\n  }\n\n  var s = \"<div style=\\\"padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\"><table>\";\n\n  if (context.points) {\n    for (var i = 0; i < context.points.length; i++) {\n      s += \"\" + '<tr>' + '<td style=\"padding:0\"><b>' + '<span style=\"color: ' + context.points[i].color + \"\\\">\" + (context.points[i].y.toFixed(rounding.length > 0 ? rounding[i] : 3) + (units.length > 0 ? \" \" + units[i] : '')) + \"</span></b></td></tr>\";\n    }\n  } else {\n    s += contextErrorMessage;\n  }\n\n  s += \"</table><span>\" + new Date(context.x).toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  }) + \"</span></div>\";\n  return s;\n}\n\nexports.sharedTimeTooltipFormatter = sharedTimeTooltipFormatter;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\n\nfunction simpleTooltipFormatter(context, units, rounding) {\n  if (units === void 0) {\n    units = '';\n  }\n\n  if (rounding === void 0) {\n    rounding = 2;\n  }\n\n  return \"<div style=\\\"padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\">\" + \"<table>\" + \"<tr>\" + (\"<td style=\\\"padding:0; color: \" + context.point.color + \"\\\">\" + context.point.name + \":</td>\") + (\"<td><b>\" + context.y.toFixed(rounding) + (units ? \" \" + units : '') + \"</b></td>\") + \"</tr>\" + \"</table>\" + \"</div>\";\n}\n\nexports.simpleTooltipFormatter = simpleTooltipFormatter;\n\n__exportStar(require(\"./i18n\"), exports);","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/@pxblue/highcharts/dist/utilities/index.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","simpleTooltipFormatter","sharedTimeTooltipFormatter","sharedTooltipFormatter","getRandomData","styles_1","require","startTime","Date","getTime","contextErrorMessage","scale","balanced","count","timeseries","data","i","push","x","y","Math","random","context","units","rounding","s","sizes","tooltip","points","length","toFixed","color","toLocaleTimeString","hour","minute","second","point","name"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\nCopyright (c) 2018-present, Eaton\n \nAll rights reserved.\n \nThis code is licensed under the BSD-3 license found in the LICENSE file in the root directory of this source tree and at https://opensource.org/licenses/BSD-3-Clause.\n**/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simpleTooltipFormatter = exports.sharedTimeTooltipFormatter = exports.sharedTooltipFormatter = exports.getRandomData = void 0;\n/*\n  This file contains various utility functions used to help build highcharts components.\n\n  getRandomData: generates random data for a placeholder chart\n  sharedTooltipFormatter: function used to render a shared html tooltip\n  sharedTimeTooltipFormatter: function used to render a shared html tooltip with Timestamp x value\n  simpleTooltipFormatter: function used to render a simple html tooltip for single series charts\n*/\nvar styles_1 = require(\"../styles\");\n// timestamp used as a starting point for randomized time-series data\nvar startTime = new Date().getTime();\nvar contextErrorMessage = 'Error: No context.points.';\n/*\n  returns a set of randomized numeric data based on the paramters\n\n  scale: (Number) the range of numeric values\n  balanced: (Boolean) if true, data will range from -scale/2 to +scale/2. If false, data will range from 0 to scale.\n  count: (Number) the number of data points to generate\n  timeseries: (Boolean) if true, the x-values will be timestamps\n*/\nfunction getRandomData(scale, balanced, count, timeseries) {\n    if (balanced === void 0) { balanced = true; }\n    if (count === void 0) { count = 20; }\n    if (timeseries === void 0) { timeseries = false; }\n    // generate an array of random data\n    var data = [];\n    var i;\n    for (i = 0; i < count; i++) {\n        if (timeseries) {\n            data.push({\n                x: startTime + i * 1000,\n                y: (Math.random() - (balanced ? 0.5 : 0)) * scale,\n            });\n        }\n        else {\n            data.push((Math.random() - (balanced ? 0.5 : 0)) * scale);\n        }\n    }\n    return data;\n}\nexports.getRandomData = getRandomData;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\nfunction sharedTooltipFormatter(context, units, rounding) {\n    if (units === void 0) { units = []; }\n    if (rounding === void 0) { rounding = []; }\n    var s = \"<div style=\\\"min-width: 100px; padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\"><table>\";\n    if (context.points) {\n        for (var i = 0; i < context.points.length; i++) {\n            s += \"\" + '<tr>' + '<td style=\"padding:0\"><b>' + context.points[i].y.toFixed(rounding.length > 0 ? rounding[i] : 3) + \"<span style=\\\"color: \" + context.points[i].color + \"\\\">\" + (units.length > 0 ? \" \" + units[i] : '') + \"</span></b></td></tr>\";\n        }\n    }\n    else {\n        s += contextErrorMessage;\n    }\n    s += \"</table><span>\" + context.x + \"</span></div>\";\n    return s;\n}\nexports.sharedTooltipFormatter = sharedTooltipFormatter;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\nfunction sharedTimeTooltipFormatter(context, units, rounding) {\n    if (units === void 0) { units = []; }\n    if (rounding === void 0) { rounding = []; }\n    var s = \"<div style=\\\"padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\"><table>\";\n    if (context.points) {\n        for (var i = 0; i < context.points.length; i++) {\n            s += \"\" + '<tr>' + '<td style=\"padding:0\"><b>' + '<span style=\"color: ' + context.points[i].color + \"\\\">\" + (context.points[i].y.toFixed(rounding.length > 0 ? rounding[i] : 3) +\n                (units.length > 0 ? \" \" + units[i] : '')) + \"</span></b></td></tr>\";\n        }\n    }\n    else {\n        s += contextErrorMessage;\n    }\n    s += \"</table><span>\" + new Date(context.x).toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n    }) + \"</span></div>\";\n    return s;\n}\nexports.sharedTimeTooltipFormatter = sharedTimeTooltipFormatter;\n/*\n  returns an HTML string for the tooltip of a shared tooltip\n\n  units: (Array<String>) an array of units to append (one per series)\n  rounding: (Array<Number>) an array specifying how many decimal places to round the values in the tooltip (one value per series)\n*/\nfunction simpleTooltipFormatter(context, units, rounding) {\n    if (units === void 0) { units = ''; }\n    if (rounding === void 0) { rounding = 2; }\n    return (\"<div style=\\\"padding: 4px; font-family: Open Sans; font-size: \" + styles_1.sizes.tooltip + \"\\\">\" +\n        \"<table>\" +\n        \"<tr>\" +\n        (\"<td style=\\\"padding:0; color: \" + context.point.color + \"\\\">\" + context.point.name + \":</td>\") +\n        (\"<td><b>\" + context.y.toFixed(rounding) + (units ? \" \" + units : '') + \"</b></td>\") +\n        \"</tr>\" +\n        \"</table>\" +\n        \"</div>\");\n}\nexports.simpleTooltipFormatter = simpleTooltipFormatter;\n__exportStar(require(\"./i18n\"), exports);\n"]},"metadata":{},"sourceType":"script"}