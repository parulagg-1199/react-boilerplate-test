{"ast":null,"code":"import _slicedToArray from \"/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport each from 'lodash/each';\nimport { REST_API } from './symbols';\nimport { isValidJSON } from './index';\n\nfunction callApi(endpoint, config) {\n  return fetch(endpoint, config).then(function (response) {\n    if (response.status === 200) {\n      return response.text().then(function (data) {\n        return isValidJSON(data) ? {\n          data: JSON.parse(data),\n          status: response.status\n        } : {\n          data: {\n            error: true,\n            message: \"Unable to parse json.\"\n          },\n          status: response.status\n        };\n      });\n    } else {\n      return response.json().then(function (data) {\n        return {\n          data: data,\n          status: response.status\n        };\n      });\n    }\n  }).catch(function () {\n    return {\n      data: {\n        error: true,\n        message: \"Internal Server Error\"\n      },\n      status: 500\n    };\n  });\n}\n\nfunction validateConfig(config) {\n  var availRest = {\n    method: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    mode: [\"same-origin\", \"cors\", \"no-cors\"],\n    cache: [\"default\", \"no-cache\", \"reload\", \"force-cache\", \"only-if-changed\"],\n    credentials: [\"same-origin\", \"include\", \"omit\"],\n    redirect: [\"follow\", \"manual\", \"error\"],\n    referrer: [\"client\", \"no-referrer\"]\n  };\n\n  if (!availRest.method.includes(config.method)) {\n    config.method = availRest.method[0];\n  }\n\n  var checkList = [\"mode\", \"cache\", \"credentials\", \"redirect\", \"referrer\"];\n  each(checkList, function (i) {\n    if (config[i] !== undefined && !availRest[i].includes(config[i])) {\n      config[i] = availRest[i][0];\n    }\n  });\n}\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      // name for api call details\n      var restApiDetails = action[REST_API]; // if api is not called in some action\n\n      if (typeof restApiDetails === 'undefined') {\n        return next(action);\n      } // extract parts\n\n\n      var endpoint = restApiDetails.endpoint,\n          types = restApiDetails.types,\n          config = restApiDetails.config; // validate config\n\n      if (config === null || typeof config !== 'object') {\n        config = {};\n      }\n\n      validateConfig(config); // extract types\n\n      var _types = _slicedToArray(types, 3),\n          requestType = _types[0],\n          successType = _types[1],\n          errorType = _types[2]; // call api with end point and config\n\n\n      return next({\n        type: requestType\n      }), callApi(endpoint, config).then(function (response) {\n        if (response.status === 200) {\n          return next({\n            response: response,\n            type: successType\n          });\n        } else {\n          return next({\n            response: response,\n            type: errorType\n          });\n        }\n      });\n    };\n  };\n});","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/src/middleware/rest-api.js"],"names":["each","REST_API","isValidJSON","callApi","endpoint","config","fetch","then","response","status","text","data","JSON","parse","error","message","json","catch","validateConfig","availRest","method","mode","cache","credentials","redirect","referrer","includes","checkList","i","undefined","store","next","action","restApiDetails","types","requestType","successType","errorType","type"],"mappings":"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","sourcesContent":["import each from 'lodash/each';\n\nimport { REST_API } from './symbols';\nimport { isValidJSON } from './index'\n\nfunction callApi(endpoint, config ) {\n    return fetch(endpoint, config)\n        .then((response)=>{\n            if (response.status === 200) {\n                return response.text().then(data=>{\n                    return isValidJSON(data)?({data: JSON.parse(data), status: response.status}):({data: {error: true, message: \"Unable to parse json.\"}, status: response.status})\n                })\n            }\n            else {\n                return response.json().then(data =>\n                    ({data, status: response.status})\n                )\n            }\n        })\n        .catch(() => ({data:{error: true, message: \"Internal Server Error\"}, status: 500}));\n}\n\nfunction validateConfig(config) {\n    const availRest = {\n        method: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n        mode: [\"same-origin\", \"cors\", \"no-cors\"],\n        cache: [\"default\", \"no-cache\", \"reload\", \"force-cache\", \"only-if-changed\"],\n        credentials: [\"same-origin\", \"include\", \"omit\"],\n        redirect: [\"follow\", \"manual\", \"error\"],\n        referrer: [\"client\", \"no-referrer\"]\n    }\n    if(!availRest.method.includes(config.method)) {\n        config.method = availRest.method[0]\n    }\n    var checkList = [\"mode\", \"cache\", \"credentials\", \"redirect\", \"referrer\"]\n    each(checkList, i => {\n        if(config[i] !== undefined && !availRest[i].includes(config[i])){\n            config[i] = availRest[i][0]\n        }\n    })\n}\n\nexport default store => next => action => {\n    // name for api call details\n    const restApiDetails = action[REST_API]\n    // if api is not called in some action\n    if(typeof restApiDetails === 'undefined') {\n        return next(action);\n    }\n    // extract parts\n    let {endpoint, types, config} = restApiDetails;\n    // validate config\n    if(config === null || typeof config !== 'object'){\n        config = {}\n    }\n    validateConfig(config)\n    // extract types\n    const [requestType, successType, errorType] = types;\n\n    // call api with end point and config\n    return (\n        next({type: requestType}),\n        callApi(endpoint, config).then(\n            response => {\n                if(response.status === 200) {\n                    return next({\n                        response,\n                        type: successType\n                    })\n                } else {\n                    return next({\n                        response,\n                        type: errorType\n                    })\n                }\n            }\n        )\n    )\n}"]},"metadata":{},"sourceType":"module"}