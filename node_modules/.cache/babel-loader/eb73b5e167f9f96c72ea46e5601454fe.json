{"ast":null,"code":"import _slicedToArray from \"/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { POST_API } from './symbols';\nimport { isValidJSON } from './index';\n\nfunction postApi(endpoint, body, authenticated) {\n  var config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  };\n\n  if (authenticated) {\n    var token = localStorage.getItem('token');\n    config.headers['Authorization'] = \"Bearer \".concat(token);\n  }\n\n  return fetch(endpoint, config).then(function (response) {\n    if (response.status === 200) {\n      return response.text().then(function (data) {\n        return isValidJSON(data) ? {\n          data: JSON.parse(data),\n          status: response.status\n        } : {\n          data: {\n            error: true,\n            message: \"Error while parsing the json.\"\n          },\n          status: response.status\n        };\n      });\n    } else {\n      return response.json().then(function (data) {\n        return {\n          data: data,\n          status: response.status\n        };\n      });\n    }\n  }).catch(function (err) {\n    return {\n      data: {\n        error: true,\n        message: \"Internal Server Error\"\n      },\n      status: 500\n    };\n  });\n}\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      var postApiDetails = action[POST_API];\n\n      if (typeof postApiDetails === 'undefined') {\n        return next(action);\n      }\n\n      var endpoint = postApiDetails.endpoint,\n          types = postApiDetails.types,\n          body = postApiDetails.body,\n          authenticated = postApiDetails.authenticated;\n\n      var _types = _slicedToArray(types, 3),\n          requestType = _types[0],\n          successType = _types[1],\n          errorType = _types[2];\n\n      return next({\n        type: requestType\n      }), postApi(endpoint, body, authenticated).then(function (response) {\n        if (response.status === 200) {\n          return next({\n            response: response,\n            type: successType\n          });\n        } else {\n          return next({\n            response: response,\n            type: errorType\n          });\n        }\n      });\n    };\n  };\n});","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/src/middleware/post-api.js"],"names":["POST_API","isValidJSON","postApi","endpoint","body","authenticated","config","method","headers","JSON","stringify","token","localStorage","getItem","fetch","then","response","status","text","data","parse","error","message","json","catch","err","store","next","action","postApiDetails","types","requestType","successType","errorType","type"],"mappings":"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","sourcesContent":["import { POST_API } from './symbols'\n\nimport { isValidJSON } from './index'\n\nfunction postApi(endpoint, body, authenticated){\n    let config = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n    }\n\n    if(authenticated) {\n        const token = localStorage.getItem('token');\n        config.headers['Authorization'] = `Bearer ${token}`\n    }\n\n    return fetch(endpoint, config).then(\n        response => {\n            if (response.status === 200) {\n                return response.text().then(data => {\n                    return isValidJSON(data) ? ({data: JSON.parse(data), status: response.status}) : ({\n                        data: {\n                            error: true,\n                            message: \"Error while parsing the json.\"\n                        }, status: response.status\n                    })\n                })\n            } else {\n                return response.json().then(data =>\n                    ({data, status: response.status})\n                )\n            }\n        }\n    )\n    .catch(err => ({data: {error: true, message: \"Internal Server Error\"}, status: 500}));\n}\n\nexport default store => next => action => {\n    const postApiDetails = action[POST_API];\n    if (typeof postApiDetails === 'undefined') {\n        return next(action)\n    }\n    let {endpoint, types, body, authenticated} = postApiDetails;\n    const [requestType, successType, errorType] = types;\n\n    return(\n        next({type: requestType}),\n        postApi(endpoint, body, authenticated).then(\n            response => {\n                if (response.status === 200) {\n                    return next({\n                        response,\n                        type: successType\n                    })\n                } else {\n                    return next({\n                        response,\n                        type: errorType\n                    })\n                }\n            }\n        )\n    )\n\n}"]},"metadata":{},"sourceType":"module"}