{"ast":null,"code":"import _defineProperty from \"/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n// dir for all the action creators\n\n/**\n * action creator must return an action and if it includes a call to api\n * one should following steps\n * \n * 1. import symbols from ../middleware/symbols.js you want to use\n * 2. there are five types of requests\n *      1. GET_API {with and without token}\n *      2. POST_API {with and without token}\n *      3. PUT_API {with and without token, with and without body}\n *      4. DELETE_API {with and without token, with and without body}\n *      5. REST_API {pass the config in action creator}\n * \n * \n * for 1-4\n *   -   if for any api call, if that needs to be authenticated, one can pass that,\n *           with a boolean attribute named authenticated\n *      \n *   -   the requests where body is required (2),\n *       one can pass body in action creator as an attribute\n *       as of type js object\n * \n * for 5th\n *   -   config needs to be passed as attribute in action creator with key name `config`\n *       if it doesn't get passed, request will be sent as following\n *       {\n *          method: 'GET'\n *       }\n * for 1-5\n *   -  each action creator must include 2 attributes,\n *      `endpoint` and `types`\n * \n *   -  `endpoint` is defines the link to api,\n *   -  `types` must be an array, and it should include 3 action types\n *      1. request type, which gets triggered when the api gets called\n *      2. success type, which gets triggered when api gets successfully called,\n *      3. error or fail type, which gets triggered when api call gets failed\n *     and these should be in same sequence as mentioned\n *     these actions would be handled from reducers\n * \n *      we can use ./ApiActions.js to use ../config.js as a env variables, in a sense\n * \n */\nimport { GET_API } from \"../../../middleware/symbols\";\nimport { GET_FORM_REQUEST, GET_FORM_SUCCESS, GET_FORM_FAILURE } from './constants';\nimport { HANDLE_DRAWER_TOGGLE_CHANGE } from './constants';\nimport { baseApi } from \"../../../common/actions/index\";\nvar BASE_URL = baseApi(); // Action Creators\n\nexport function getData() {\n  return _defineProperty({}, GET_API, {\n    endpoint: BASE_URL + '/parameters',\n    authenticated: true,\n    types: [GET_FORM_REQUEST, GET_FORM_SUCCESS, GET_FORM_FAILURE]\n  });\n}\nexport function handleDrawerToggleChange(toggleStatus) {\n  return {\n    type: HANDLE_DRAWER_TOGGLE_CHANGE,\n    toggleStatus: toggleStatus\n  };\n}","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/src/pages/app/drawer/action.js"],"names":["GET_API","GET_FORM_REQUEST","GET_FORM_SUCCESS","GET_FORM_FAILURE","HANDLE_DRAWER_TOGGLE_CHANGE","baseApi","BASE_URL","getData","endpoint","authenticated","types","handleDrawerToggleChange","toggleStatus","type"],"mappings":";AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CC,SAASA,OAAT,QAAwB,6BAAxB;AAEA,SACIC,gBADJ,EACqBC,gBADrB,EACsCC,gBADtC,QAEO,aAFP;AAIA,SACIC,2BADJ,QAEO,aAFP;AAGA,SAASC,OAAT,QAAwB,+BAAxB;AAEA,IAAMC,QAAQ,GAAGD,OAAO,EAAxB,C,CAEA;;AACA,OAAO,SAASE,OAAT,GAAmB;AACtB,6BACKP,OADL,EACc;AACNQ,IAAAA,QAAQ,EAAEF,QAAQ,GAAG,aADf;AAENG,IAAAA,aAAa,EAAE,IAFT;AAGNC,IAAAA,KAAK,EAAE,CAAET,gBAAF,EAAmBC,gBAAnB,EAAoCC,gBAApC;AAHD,GADd;AAOH;AACD,OAAO,SAASQ,wBAAT,CAAkCC,YAAlC,EAAgD;AACnD,SAAO;AAACC,IAAAA,IAAI,EAAET,2BAAP;AAAoCQ,IAAAA,YAAY,EAAZA;AAApC,GAAP;AACH","sourcesContent":["// dir for all the action creators\n\n/**\n * action creator must return an action and if it includes a call to api\n * one should following steps\n * \n * 1. import symbols from ../middleware/symbols.js you want to use\n * 2. there are five types of requests\n *      1. GET_API {with and without token}\n *      2. POST_API {with and without token}\n *      3. PUT_API {with and without token, with and without body}\n *      4. DELETE_API {with and without token, with and without body}\n *      5. REST_API {pass the config in action creator}\n * \n * \n * for 1-4\n *   -   if for any api call, if that needs to be authenticated, one can pass that,\n *           with a boolean attribute named authenticated\n *      \n *   -   the requests where body is required (2),\n *       one can pass body in action creator as an attribute\n *       as of type js object\n * \n * for 5th\n *   -   config needs to be passed as attribute in action creator with key name `config`\n *       if it doesn't get passed, request will be sent as following\n *       {\n *          method: 'GET'\n *       }\n * for 1-5\n *   -  each action creator must include 2 attributes,\n *      `endpoint` and `types`\n * \n *   -  `endpoint` is defines the link to api,\n *   -  `types` must be an array, and it should include 3 action types\n *      1. request type, which gets triggered when the api gets called\n *      2. success type, which gets triggered when api gets successfully called,\n *      3. error or fail type, which gets triggered when api call gets failed\n *     and these should be in same sequence as mentioned\n *     these actions would be handled from reducers\n * \n *      we can use ./ApiActions.js to use ../config.js as a env variables, in a sense\n * \n */\n import { GET_API } from \"../../../middleware/symbols\";\n\n import {\n     GET_FORM_REQUEST,GET_FORM_SUCCESS,GET_FORM_FAILURE\n } from './constants';\n \n import {\n     HANDLE_DRAWER_TOGGLE_CHANGE\n } from './constants';\n import { baseApi } from \"../../../common/actions/index\";\n \n const BASE_URL = baseApi()\n \n // Action Creators\n export function getData() {\n     return {\n         [GET_API]:{\n             endpoint: BASE_URL + '/parameters',\n             authenticated: true,\n             types: [ GET_FORM_REQUEST,GET_FORM_SUCCESS,GET_FORM_FAILURE],\n         }\n     }\n }\n export function handleDrawerToggleChange(toggleStatus) {\n     return {type: HANDLE_DRAWER_TOGGLE_CHANGE, toggleStatus}\n }\n \n "]},"metadata":{},"sourceType":"module"}