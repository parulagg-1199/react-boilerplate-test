{"ast":null,"code":"import _slicedToArray from \"/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { GET_API } from './symbols';\nimport { isValidJSON } from './index';\n\nfunction getApi(endpoint, authenticated) {\n  var config = {\n    method: 'GET'\n  };\n\n  if (authenticated) {\n    var token = localStorage.getItem('token');\n    config['headers'] = {\n      'Authorization': \"Bearer \".concat(token)\n    };\n  }\n\n  return fetch(endpoint, config).then(function (response) {\n    if (response.status === 200) {\n      return response.text().then(function (data) {\n        return isValidJSON(data) ? {\n          data: JSON.parse(data),\n          status: response.status\n        } : {\n          data: {\n            error: true,\n            message: \"Error while parsing the json.\"\n          },\n          status: response.status\n        };\n      });\n    } else {\n      return response.json().then(function (data) {\n        return {\n          data: data,\n          status: response.status\n        };\n      });\n    }\n  }).catch(function (err) {\n    return {\n      data: {\n        error: true,\n        message: \"Internal Server Error\"\n      },\n      status: 500\n    };\n  });\n}\n\nexport default (function (store) {\n  return function (next) {\n    return function (action) {\n      var getApiDetails = action[GET_API];\n\n      if (typeof getApiDetails === 'undefined') {\n        return next(action);\n      }\n\n      var endpoint = getApiDetails.endpoint,\n          types = getApiDetails.types,\n          authenticated = getApiDetails.authenticated;\n\n      var _types = _slicedToArray(types, 3),\n          requestType = _types[0],\n          successType = _types[1],\n          errorType = _types[2];\n\n      return next({\n        type: requestType\n      }), getApi(endpoint, authenticated).then(function (response) {\n        if (response.status === 200) {\n          return next({\n            response: response,\n            type: successType\n          });\n        } else {\n          return next({\n            response: response,\n            type: errorType\n          });\n        }\n      });\n    };\n  };\n});","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/src/middleware/get-api.js"],"names":["GET_API","isValidJSON","getApi","endpoint","authenticated","config","method","token","localStorage","getItem","fetch","then","response","status","text","data","JSON","parse","error","message","json","catch","err","store","next","action","getApiDetails","types","requestType","successType","errorType","type"],"mappings":";AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,SAASC,WAAT,QAA4B,SAA5B;;AAEA,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,aAA1B,EAAwC;AACpC,MAAIC,MAAM,GAAG;AACTC,IAAAA,MAAM,EAAE;AADC,GAAb;;AAIA,MAAKF,aAAL,EAAqB;AACjB,QAAMG,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAJ,IAAAA,MAAM,CAAC,SAAD,CAAN,GAAoB;AAChB,wCAA2BE,KAA3B;AADgB,KAApB;AAGH;;AAED,SAAOG,KAAK,CAACP,QAAD,EAAWE,MAAX,CAAL,CACFM,IADE,CACG,UAACC,QAAD,EAAc;AAChB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,aAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqB,UAAAI,IAAI,EAAI;AAChC,eAAOd,WAAW,CAACc,IAAD,CAAX,GAAqB;AAACA,UAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;AAAyBF,UAAAA,MAAM,EAAED,QAAQ,CAACC;AAA1C,SAArB,GAA2E;AAC9EE,UAAAA,IAAI,EAAE;AACFG,YAAAA,KAAK,EAAE,IADL;AAEFC,YAAAA,OAAO,EAAE;AAFP,WADwE;AAI3EN,UAAAA,MAAM,EAAED,QAAQ,CAACC;AAJ0D,SAAlF;AAMH,OAPM,CAAP;AAQH,KATD,MASO;AACH,aAAOD,QAAQ,CAACQ,IAAT,GAAgBT,IAAhB,CAAqB,UAAAI,IAAI;AAAA,eAC3B;AAACA,UAAAA,IAAI,EAAJA,IAAD;AAAOF,UAAAA,MAAM,EAAED,QAAQ,CAACC;AAAxB,SAD2B;AAAA,OAAzB,CAAP;AAGH;AACJ,GAhBE,EAiBFQ,KAjBE,CAiBI,UAAAC,GAAG;AAAA,WAAK;AAACP,MAAAA,IAAI,EAAE;AAACG,QAAAA,KAAK,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE;AAAvB,OAAP;AAAwDN,MAAAA,MAAM,EAAE;AAAhE,KAAL;AAAA,GAjBP,CAAP;AAkBH;;AAED,gBAAe,UAAAU,KAAK;AAAA,SAAI,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACtC,UAAMC,aAAa,GAAGD,MAAM,CAACzB,OAAD,CAA5B;;AACA,UAAI,OAAO0B,aAAP,KAAyB,WAA7B,EAA0C;AACtC,eAAOF,IAAI,CAACC,MAAD,CAAX;AACH;;AAJqC,UAKjCtB,QALiC,GAKCuB,aALD,CAKjCvB,QALiC;AAAA,UAKvBwB,KALuB,GAKCD,aALD,CAKvBC,KALuB;AAAA,UAKhBvB,aALgB,GAKCsB,aALD,CAKhBtB,aALgB;;AAAA,kCAMQuB,KANR;AAAA,UAM/BC,WAN+B;AAAA,UAMlBC,WANkB;AAAA,UAMLC,SANK;;AAOtC,aACIN,IAAI,CAAC;AAACO,QAAAA,IAAI,EAAEH;AAAP,OAAD,CAAJ,EACA1B,MAAM,CAACC,QAAD,EAAWC,aAAX,CAAN,CAAgCO,IAAhC,CACA,UAAAC,QAAQ,EAAI;AACR,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzB,iBAAOW,IAAI,CAAC;AACRZ,YAAAA,QAAQ,EAARA,QADQ;AAERmB,YAAAA,IAAI,EAAEF;AAFE,WAAD,CAAX;AAIH,SALD,MAKO;AACH,iBAAOL,IAAI,CAAC;AACRZ,YAAAA,QAAQ,EAARA,QADQ;AAERmB,YAAAA,IAAI,EAAED;AAFE,WAAD,CAAX;AAIH;AACJ,OAbD,CAFJ;AAiBH,KAxB2B;AAAA,GAAR;AAAA,CAApB","sourcesContent":["import { GET_API } from './symbols';\n\nimport { isValidJSON } from './index'\n\nfunction getApi(endpoint, authenticated){\n    let config = {\n        method: 'GET'\n    }\n\n    if ( authenticated ) {\n        const token = localStorage.getItem('token');\n        config['headers'] = {\n            'Authorization': `Bearer ${token}`\n        }\n    }\n\n    return fetch(endpoint, config)\n        .then((response) => {\n            if (response.status === 200) {\n                return response.text().then(data => {\n                    return isValidJSON(data) ? ({data: JSON.parse(data), status: response.status}) : ({\n                        data: {\n                            error: true,\n                            message: \"Error while parsing the json.\"\n                        }, status: response.status\n                    })\n                })\n            } else {\n                return response.json().then(data =>\n                    ({data, status: response.status})\n                )\n            }\n        })\n        .catch(err => ({data: {error: true, message: \"Internal Server Error\"}, status: 500}));\n}\n\nexport default store => next => action => {\n    const getApiDetails = action[GET_API]\n    if (typeof getApiDetails === 'undefined') {\n        return next(action);\n    }\n    let {endpoint, types, authenticated} = getApiDetails;\n    const [requestType, successType, errorType] = types;\n    return (\n        next({type: requestType}),\n        getApi(endpoint, authenticated).then(\n        response => {\n            if (response.status === 200) {\n                return next({\n                    response,\n                    type: successType\n                })\n            } else {\n                return next({\n                    response,\n                    type: errorType\n                })\n            }\n        }\n    ))\n}"]},"metadata":{},"sourceType":"module"}