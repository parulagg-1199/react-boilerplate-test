{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cramda = _interopRequireDefault(require(\"cramda\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar first = _cramda[\"default\"].first,\n    tail = _cramda[\"default\"].tail;\n\nfunction formatNumber(text, pattern, autoFormat) {\n  if (!text || text.length === 0) {\n    return '+';\n  } // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n\n\n  if (text && text.length < 2 || !pattern || !autoFormat) {\n    return \"+\" + text;\n  }\n\n  var formattedObject = pattern.split('').reduce(function (acc, character) {\n    if (acc.remainingText.length === 0) {\n      return acc;\n    }\n\n    if (character !== '.') {\n      return {\n        formattedText: acc.formattedText + character,\n        remainingText: acc.remainingText\n      };\n    }\n\n    return {\n      formattedText: acc.formattedText + first(acc.remainingText),\n      remainingText: tail(acc.remainingText)\n    };\n  }, {\n    formattedText: '',\n    remainingText: text.split('')\n  });\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nvar _default = formatNumber;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/xs119-paragg/Downloads/boilerplate/react-boilerplate/node_modules/react-telephone-input/lib/format_number.js"],"names":["exports","__esModule","_cramda","_interopRequireDefault","require","obj","first","tail","formatNumber","text","pattern","autoFormat","length","formattedObject","split","reduce","acc","character","remainingText","formattedText","join","_default","module","default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACJ,UAAX,GAAwBI,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIC,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBI,KAA/B;AAAA,IACIC,IAAI,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,IAD9B;;AAGA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,UAArC,EAAiD;AAC/C,MAAI,CAACF,IAAD,IAASA,IAAI,CAACG,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,WAAO,GAAP;AACD,GAH8C,CAG7C;AACF;;;AAGA,MAAIH,IAAI,IAAIA,IAAI,CAACG,MAAL,GAAc,CAAtB,IAA2B,CAACF,OAA5B,IAAuC,CAACC,UAA5C,EAAwD;AACtD,WAAO,MAAMF,IAAb;AACD;;AAED,MAAII,eAAe,GAAGH,OAAO,CAACI,KAAR,CAAc,EAAd,EAAkBC,MAAlB,CAAyB,UAAUC,GAAV,EAAeC,SAAf,EAA0B;AACvE,QAAID,GAAG,CAACE,aAAJ,CAAkBN,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,aAAOI,GAAP;AACD;;AAED,QAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrB,aAAO;AACLE,QAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBF,SAD9B;AAELC,QAAAA,aAAa,EAAEF,GAAG,CAACE;AAFd,OAAP;AAID;;AAED,WAAO;AACLC,MAAAA,aAAa,EAAEH,GAAG,CAACG,aAAJ,GAAoBb,KAAK,CAACU,GAAG,CAACE,aAAL,CADnC;AAELA,MAAAA,aAAa,EAAEX,IAAI,CAACS,GAAG,CAACE,aAAL;AAFd,KAAP;AAID,GAhBqB,EAgBnB;AACDC,IAAAA,aAAa,EAAE,EADd;AAEDD,IAAAA,aAAa,EAAET,IAAI,CAACK,KAAL,CAAW,EAAX;AAFd,GAhBmB,CAAtB;AAoBA,SAAOD,eAAe,CAACM,aAAhB,GAAgCN,eAAe,CAACK,aAAhB,CAA8BE,IAA9B,CAAmC,EAAnC,CAAvC;AACD;;AAED,IAAIC,QAAQ,GAAGb,YAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqBqB,QAArB;AACAC,MAAM,CAACtB,OAAP,GAAiBA,OAAO,CAACuB,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _cramda = _interopRequireDefault(require(\"cramda\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar first = _cramda[\"default\"].first,\n    tail = _cramda[\"default\"].tail;\n\nfunction formatNumber(text, pattern, autoFormat) {\n  if (!text || text.length === 0) {\n    return '+';\n  } // for all strings with length less than 3, just return it (1, 2 etc.)\n  // also return the same text if the selected country has no fixed format\n\n\n  if (text && text.length < 2 || !pattern || !autoFormat) {\n    return \"+\" + text;\n  }\n\n  var formattedObject = pattern.split('').reduce(function (acc, character) {\n    if (acc.remainingText.length === 0) {\n      return acc;\n    }\n\n    if (character !== '.') {\n      return {\n        formattedText: acc.formattedText + character,\n        remainingText: acc.remainingText\n      };\n    }\n\n    return {\n      formattedText: acc.formattedText + first(acc.remainingText),\n      remainingText: tail(acc.remainingText)\n    };\n  }, {\n    formattedText: '',\n    remainingText: text.split('')\n  });\n  return formattedObject.formattedText + formattedObject.remainingText.join('');\n}\n\nvar _default = formatNumber;\nexports[\"default\"] = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}